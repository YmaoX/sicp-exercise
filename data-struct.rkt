#lang racket
(require "basic.rkt")
(require "first-class.rkt")

(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
;;201
(define (make-rat n d)
  (if (> d 0)
      (cons n d)
      (cons (- n) (- d))))
;;2.2
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (make-segment start end)
  (cons start end))
(define (start-segment seg)
  (car seg))
(define (end-segment seg)
  (cdr seg))
(define (midpoint-segment seg)
  (make-point
   (average
    (x-point (start-segment seg)) (x-point (end-segment seg)))
   (average
    (y-point (start-segment seg)) (y-point (end-segment seg)))))
;;2.3
(define (make-rect length width)
  (cons length width))
(define (l-rect rect)
  (car rect))
(define (w-rect rect)
  (cdr rect))
(define (distance seg)
  (let ((diff-x (abs (- (x-point (start-segment seg))
                        (x-point (end-segment seg)))))
        (diff-y (abs (- (y-point (start-segment seg))
                        (y-point (end-segment seg))))))
    (sqrt-m (+ (fast-expr diff-x 2) (fast-expr diff-y 2)))))
(define (perimeter rect)
  (* 2 (+ (distance (l-rect rect)) (distance (w-rect rect)))))
(define (area rect)
  (* (distance (l-rect rect)) (distance (w-rect rect))))
;(perimeter (make-rect (make-segment (make-point 1 1) (make-point 3 3))
;                        (make-segment (make-point 1 1) (make-point 0 2))))
;;2.5
(define (cons-p a b)
  (* (fast-expr 2 a) (fast-expr 3 b)))
(define (car-p p)
  (define (iter p n)
    (if (not (= 0 (remainder p 2)))
        n
        (iter (/ p 2) (+ n 1))))
  (iter p 0))
(define (cdr-p p)
  (define (iter p n)
    (if (not (= 0 (remainder p 3)))
        n
        (iter (/ p 3) (+ n 1))))
  (iter p 0))

;;interval arithmetic
(define (make-interval a b)(cons a b))
(define (lower-bound i)(car i))
(define (upper-bound i)(cdr i))

(define (add-interval x y)
  (make-interval (+ (lower-bound x)(lower-bound y))
                 (+ (upper-bound x)(upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x)(lower-bound y)))
        (p2 (* (lower-bound x)(upper-bound y)))
        (p3 (* (upper-bound x)(lower-bound y)))
        (p4 (* (upper-bound x)(upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (>= 0 (* (lower-bound y)(upper-bound y)))
      (error "division error")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound x))))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x)(upper-bound y))
                 (- (upper-bound x)(lower-bound y))))
(define (width-interval i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

;;center + tolerance
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i)(upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i)(lower-bound i)) 2))

(define (make-center-percent c p)
  (let ((half-width (/ (* p c) 2)))
    (make-interval (- c half-width) (+ c half-width))))
(define (percent i)
  (/ (- (upper-bound i)(lower-bound i))
     (/ (+ (upper-bound i)(lower-bound i)) 2)))