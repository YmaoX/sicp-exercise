#lang racket
(provide prime?)
(provide even?)

;;(provide (all-defined-out))
(define (square n)
  (* n n))
(define (divides? a b)
  (= (remainder b a) 0))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (next test-divisor)
  (if (= 2 test-divisor) 3
  (+ test-divisor 2)))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
;;----------------------------------------------------
(define (even? n)
  (= (remainder n 2) 0))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
;;-----------------------------------------------------------
(define (prime? n)
  (fast-prime? n 4))
(define (report-prime start-time)
  (display " *** ")
  (display (- (current-inexact-milliseconds) start-time)))

(define (range-prime-test n count limit)
  (define (timed-prime-test n start-time count limit)
  (cond ((= n limit) (display "limit reached"))
        ((= count 0) (report-prime start-time))
        ((prime? n)
         (display n)
         (newline)
         (timed-prime-test (+ n 1) start-time (- count 1) limit))
        (else (timed-prime-test (+ n 1) start-time count limit))))
  (timed-prime-test n (current-inexact-milliseconds) count limit))
;;-----------------------------------------------------------
(define (expmod-m base exp m)
  (define (expmod-check x)
    (define (check-square x squared-remainder)
    (if (and (not (= x 1))
             (not (= x (- m 1)))
             (= squared-remainder 1))
        0
        squared-remainder))
    (check-square x (remainder (square x) m)))
  
  (cond ((= exp 0) 1)
        ((even? exp)
         (expmod-check (expmod-m base (/ exp 2) m)))
        (else (remainder (* base (expmod-m base (- exp 1) m)) m))))

(define (miller-rabin-test n)
   (define (try-it a)
    (= (expmod-m a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))